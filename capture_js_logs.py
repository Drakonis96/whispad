#!/usr/bin/env python3
"""
Script para capturar logs del test JavaScript ejecut√°ndolo autom√°ticamente
"""

import requests
import json
import time

def simulate_javascript_execution():
    """Simula la ejecuci√≥n del test JavaScript desde final_test.html"""
    
    print("üîç Simulando ejecuci√≥n del test JavaScript de final_test.html")
    print("="*60)
    
    try:
        # Paso 1: Verificar backendAPI (simular)
        print("‚úÖ backendAPI disponible (simulado)")
        
        # Paso 2: Cargar audio como lo hace el JavaScript
        print("üìÅ Cargando archivo de audio...")
        response = requests.get("http://localhost:5037/test/test.wav")
        if not response.ok:
            raise Exception(f"No se pudo cargar test.wav: {response.status_code}")
        
        audio_data = response.content
        print(f"üìÑ Audio cargado: {len(audio_data)} bytes")
        
        # Paso 3: Simular transcribeWithOpenAI
        print("üîß Ejecutando transcribeWithOpenAI...")
        
        mock_config = {
            'transcriptionModel': 'gpt-4o-mini-transcribe',
            'transcriptionLanguage': 'auto',
            'transcriptionPrompt': '',
            'streamingEnabled': False,
            'transcriptionProvider': 'openai'
        }
        
        model = mock_config['transcriptionModel']
        print(f"üéØ Modelo seleccionado: {model}")
        
        # Paso 4: Como incluye 'gpt-4o', simular transcribeWithGPT4O
        if 'gpt-4o' in model:
            print("üîÑ Usando GPT-4o transcription...")
            
            # Paso 5: Preparar opciones exactas como el JavaScript
            options = {
                'model': mock_config['transcriptionModel'],
                'language': mock_config['transcriptionLanguage'],
                'responseFormat': 'json',
                'stream': mock_config['streamingEnabled'] and 'gpt-4o' in mock_config['transcriptionModel']
            }
            
            if mock_config['transcriptionPrompt']:
                options['prompt'] = mock_config['transcriptionPrompt']
            
            print(f"‚öôÔ∏è Opciones: {json.dumps(options, indent=2)}")
            print(f"üåä Streaming: {options['stream']}")
            
            # Paso 6: Como stream=False, simular transcripci√≥n normal
            if not options['stream']:
                print("üîÑ Usando transcription normal...")
                print("üìû Llamando backendAPI.transcribeAudioGPT4O...")
                
                # Esta es la llamada REAL que hace el JavaScript
                files = {'audio': ('test.wav', audio_data, 'audio/wav')}
                data = {
                    'model': options['model'],
                    'response_format': options['responseFormat'],
                    'stream': 'false'
                }
                
                if options['language'] and options['language'] != 'auto':
                    data['language'] = options['language']
                
                if options.get('prompt'):
                    data['prompt'] = options['prompt']
                
                print(f"üì§ Datos enviados: {data}")
                
                # Hacer la petici√≥n EXACTA que hace el JavaScript
                api_response = requests.post(
                    "http://localhost:5037/api/transcribe-gpt4o",
                    files=files,
                    data=data,
                    timeout=30
                )
                
                print(f"üìä Respuesta HTTP: {api_response.status_code}")
                print(f"üìã Headers: {dict(api_response.headers)}")
                
                if api_response.ok:
                    result = api_response.json()
                    transcription = result.get('transcription', '')
                    print(f"‚úÖ Resultado: {transcription}")
                    print("üéâ TEST JAVASCRIPT SIMULADO EXITOSO")
                    return True
                else:
                    error_text = api_response.text
                    print(f"‚ùå Error HTTP: {error_text}")
                    
                    # Intentar parsear error JSON
                    try:
                        error_json = api_response.json()
                        print(f"‚ùå Error JSON: {json.dumps(error_json, indent=2)}")
                    except:
                        print("‚ùå No se pudo parsear error como JSON")
                    
                    print("‚ùå TEST JAVASCRIPT SIMULADO FALL√ì")
                    return False
            else:
                print("üåä Streaming habilitado - requiere implementaci√≥n espec√≠fica")
                return False
        else:
            print("üîÑ Modelo no es GPT-4o")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en simulaci√≥n: {e}")
        print("‚ùå TEST JAVASCRIPT SIMULADO FALL√ì")
        return False

def analyze_potential_frontend_issues():
    """Analiza posibles problemas del frontend"""
    
    print("\nüîç AN√ÅLISIS DE POSIBLES PROBLEMAS DEL FRONTEND")
    print("="*60)
    
    # 1. Verificar si backend-api.js se carga correctamente
    print("1. Verificando backend-api.js...")
    try:
        response = requests.get("http://localhost:5037/backend-api.js")
        if response.ok:
            print("‚úÖ backend-api.js accesible")
            
            # Verificar contenido b√°sico
            content = response.text
            if 'class BackendAPI' in content:
                print("‚úÖ Clase BackendAPI encontrada")
            else:
                print("‚ùå Clase BackendAPI NO encontrada")
                
            if 'transcribeAudioGPT4O' in content:
                print("‚úÖ M√©todo transcribeAudioGPT4O encontrado")
            else:
                print("‚ùå M√©todo transcribeAudioGPT4O NO encontrado")
                
        else:
            print(f"‚ùå Error cargando backend-api.js: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error verificando backend-api.js: {e}")
    
    # 2. Verificar p√°gina principal
    print("\n2. Verificando p√°gina principal...")
    try:
        response = requests.get("http://localhost:5037/")
        if response.ok:
            print("‚úÖ P√°gina principal accesible")
            
            content = response.text
            if 'backend-api.js' in content:
                print("‚úÖ backend-api.js referenciado")
            else:
                print("‚ùå backend-api.js NO referenciado")
                
            if 'app.js' in content:
                print("‚úÖ app.js referenciado")
            else:
                print("‚ùå app.js NO referenciado")
        else:
            print(f"‚ùå Error cargando p√°gina principal: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error verificando p√°gina principal: {e}")
    
    # 3. Verificar headers CORS
    print("\n3. Verificando CORS...")
    try:
        response = requests.get("http://localhost:5037/api/check-apis")
        cors_headers = {k: v for k, v in response.headers.items() if 'cors' in k.lower() or 'access-control' in k.lower()}
        if cors_headers:
            print(f"‚úÖ Headers CORS encontrados: {cors_headers}")
        else:
            print("‚ö†Ô∏è No se encontraron headers CORS espec√≠ficos")
    except Exception as e:
        print(f"‚ùå Error verificando CORS: {e}")

def main():
    """Funci√≥n principal"""
    
    # Ejecutar simulaci√≥n del JavaScript
    success = simulate_javascript_execution()
    
    # Analizar posibles problemas
    analyze_potential_frontend_issues()
    
    print(f"\nüìä RESULTADO FINAL:")
    if success:
        print("‚úÖ La simulaci√≥n del JavaScript fue EXITOSA")
        print("üéØ El problema puede estar en:")
        print("   - Manejo de promesas/async-await")
        print("   - Event listeners del frontend")
        print("   - Configuraci√≥n espec√≠fica del navegador")
        print("   - Interferencia de otros scripts")
    else:
        print("‚ùå La simulaci√≥n del JavaScript FALL√ì")
        print("üéØ Se encontraron problemas reales en el backend/API")
    
    print("\nüìã RECOMENDACI√ìN:")
    print("1. Abre http://localhost:5037/final_test.html en el navegador")
    print("2. Abre DevTools (F12)")
    print("3. Ve a la pesta√±a Console")
    print("4. Haz clic en 'Test Exacto del Frontend Principal'")
    print("5. Revisa los mensajes de error en la consola")

if __name__ == "__main__":
    main()

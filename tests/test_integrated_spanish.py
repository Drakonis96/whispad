#!/usr/bin/env python3
"""
Test integrated Spanish support in main concept_graph.py
"""

import time
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from concept_graph import build_concept_graph

def test_integrated_spanish():
    """Test Spanish support in main concept graph"""
    print("üá™üá∏ PRUEBA DE SOPORTE ESPA√ëOL INTEGRADO")
    print("=" * 60)
    
    # Spanish text
    spanish_text = """
    La inteligencia artificial y el aprendizaje autom√°tico est√°n transformando la tecnolog√≠a. 
    Los algoritmos de aprendizaje profundo utilizan redes neuronales para procesar patrones 
    complejos de datos. El procesamiento de lenguaje natural permite a las computadoras entender 
    el lenguaje humano. La visi√≥n por computadora permite a las m√°quinas interpretar informaci√≥n visual.
    
    La ciencia de datos combina an√°lisis estad√≠stico con t√©cnicas de aprendizaje autom√°tico. 
    La ingenier√≠a de software asegura el dise√±o sistem√°tico de sistemas robustos. La gesti√≥n 
    de bases de datos proporciona almacenamiento eficiente de informaci√≥n.
    
    La computaci√≥n en la nube ofrece infraestructura escalable para aplicaciones. La ciberseguridad 
    protege los activos digitales. El internet de las cosas conecta dispositivos para generar datos.
    
    La tecnolog√≠a blockchain proporciona libros contables seguros. La computaci√≥n cu√°ntica promete 
    resolver problemas complejos. La realidad virtual crea experiencias digitales inmersivas.
    
    El an√°lisis de big data procesa grandes vol√∫menes de informaci√≥n. La computaci√≥n en el borde 
    reduce la latencia. La arquitectura de microservicios descompone aplicaciones en servicios.
    
    Las pr√°cticas DevOps integran desarrollo y operaciones. Las APIs permiten comunicaci√≥n entre 
    sistemas. El dise√±o de experiencia de usuario crea interfaces intuitivas.
    
    La computaci√≥n m√≥vil proporciona acceso ubicuo. Las redes sociales facilitan comunicaci√≥n global. 
    El comercio electr√≥nico permite compras en l√≠nea. La transformaci√≥n digital moderniza organizaciones.
    """
    
    # Expected Spanish concepts
    expected_concepts = {
        'inteligencia artificial', 'aprendizaje autom√°tico', 'aprendizaje profundo',
        'redes neuronales', 'procesamiento de lenguaje natural', 'visi√≥n por computadora',
        'ciencia de datos', 'ingenier√≠a de software', 'gesti√≥n de bases de datos',
        'computaci√≥n en la nube', 'ciberseguridad', 'internet de las cosas',
        'tecnolog√≠a blockchain', 'computaci√≥n cu√°ntica', 'realidad virtual',
        'big data', 'computaci√≥n en el borde', 'arquitectura de microservicios',
        'experiencia de usuario', 'computaci√≥n m√≥vil', 'redes sociales',
        'comercio electr√≥nico', 'transformaci√≥n digital'
    }
    
    print(f"üìÑ Texto: {len(spanish_text)} caracteres")
    print(f"üéØ Conceptos esperados: {len(expected_concepts)}")
    
    # Test with language detection (auto)
    print("\nüîç Prueba con detecci√≥n autom√°tica de idioma:")
    start_time = time.time()
    result_auto = build_concept_graph(spanish_text, analysis_type='bridges')
    duration_auto = time.time() - start_time
    
    nodes_auto = result_auto.get('nodes', [])
    print(f"   ‚è±Ô∏è  Tiempo: {duration_auto:.2f}s")
    print(f"   üìä Nodos: {len(nodes_auto)}")
    
    # Extract node labels for quality assessment
    node_labels = {node.get('label', '').lower() for node in nodes_auto}
    
    # Find matches with enhanced Spanish compound term matching
    found_concepts = set()
    for label in node_labels:
        label_clean = label.strip()
        for expected in expected_concepts:
            # Direct match
            if expected in label_clean or label_clean in expected:
                found_concepts.add(expected)
                continue
            
            # Enhanced compound term matching for Spanish
            # Extract key words from both expected and found labels
            expected_words = [w for w in expected.split() if len(w) > 3 and w not in {'las', 'los', 'del', 'por', 'con', 'para'}]
            label_words = [w for w in label_clean.split() if len(w) > 3]
            
            # Check if most key words match
            if len(expected_words) >= 2 and len(label_words) >= 2:
                matches = sum(1 for ew in expected_words for lw in label_words if ew in lw or lw in ew)
                if matches >= len(expected_words) - 1:  # Allow 1 missing word
                    found_concepts.add(expected)
    
    quality_score = len(found_concepts) / len(expected_concepts) * 100
    
    print(f"   üéØ Calidad: {quality_score:.1f}% ({len(found_concepts)}/{len(expected_concepts)})")
    print(f"   ‚úÖ Encontrados: {len(found_concepts)} conceptos")
    print(f"   üìù Conceptos encontrados: {sorted(found_concepts)}")
    print(f"   ‚ùå Conceptos faltantes: {sorted(set(expected_concepts) - found_concepts)}")
    
    # Check for problematic Spanish words
    problematic_spanish = {
        'el', 'la', 'los', 'las', 'un', 'una', 'de', 'del', 'en', 'con', 
        'por', 'para', 'y', 'o', 'que', 'es', 'son', 'est√°', 'est√°n'
    }
    
    found_problematic = node_labels.intersection(problematic_spanish)
    
    print(f"   üîç Filtrado: {len(found_problematic)} palabras problem√°ticas")
    
    if found_problematic:
        print(f"   ‚ö†Ô∏è Problem√°ticas: {sorted(found_problematic)}")
    else:
        print("   ‚úÖ Sin palabras problem√°ticas")
    
    print(f"\nüìù Primeros 10 nodos: {sorted(list(node_labels))[:10]}")
    
    return quality_score >= 70, duration_auto <= 10, len(found_problematic) <= 2

def test_mixed_content():
    """Test with mixed Spanish-English content"""
    print("\n" + "=" * 60)
    print("üåê PRUEBA DE CONTENIDO MIXTO")
    print("=" * 60)
    
    mixed_text = """
    La inteligencia artificial (artificial intelligence) y machine learning est√°n revolucionando 
    la industria tecnol√≥gica. Deep learning algorithms utilizan neural networks para procesar 
    informaci√≥n compleja. Data science combina statistical analysis con domain expertise.
    
    Cloud computing platforms ofrecen scalable infrastructure para enterprise applications. 
    Cybersecurity measures protegen digital assets mediante advanced encryption. Internet of Things 
    dispositivos generan massive datasets para real-time analytics.
    
    Software engineering practices aseguran robust system architectures. Database management 
    systems proporcionan efficient data storage y retrieval capabilities.
    """
    
    print(f"üìÑ Texto mixto: {len(mixed_text)} caracteres")
    
    result = build_concept_graph(mixed_text)
    nodes = result.get('nodes', [])
    
    print(f"üìä Resultado: {len(nodes)} nodos")
    
    # Check for both English and Spanish terms
    node_labels = {node.get('label', '').lower() for node in nodes}
    
    english_terms = {'artificial intelligence', 'machine learning', 'deep learning', 
                    'neural networks', 'data science', 'cloud computing', 'cybersecurity',
                    'internet of things', 'software engineering', 'database management'}
    
    spanish_terms = {'inteligencia artificial', 'aprendizaje autom√°tico', 'aprendizaje profundo',
                    'redes neuronales', 'ciencia de datos', 'computaci√≥n en la nube', 'ciberseguridad',
                    'internet de las cosas', 'ingenier√≠a de software', 'gesti√≥n de bases de datos'}
    
    found_english = 0
    found_spanish = 0
    
    for label in node_labels:
        if any(term in label for term in english_terms):
            found_english += 1
        if any(term in label for term in spanish_terms):
            found_spanish += 1
    
    print(f"   üá∫üá∏ T√©rminos en ingl√©s detectados: {found_english}")
    print(f"   üá™üá∏ T√©rminos en espa√±ol detectados: {found_spanish}")
    
    if found_english > 0 and found_spanish > 0:
        print("   ‚úÖ Manejo exitoso de contenido mixto")
        return True
    else:
        print("   ‚ö†Ô∏è Contenido mixto necesita mejoras")
        return False

def test_performance_large_spanish():
    """Test performance with large Spanish document"""
    print("\n" + "=" * 60)
    print("üìà PRUEBA DE RENDIMIENTO - DOCUMENTO GRANDE")
    print("=" * 60)
    
    # Create large Spanish document
    base_spanish = """
    La inteligencia artificial y el aprendizaje autom√°tico est√°n revolucionando los negocios. 
    Los algoritmos de aprendizaje profundo utilizan redes neuronales para an√°lisis de datos complejos. 
    El procesamiento de lenguaje natural permite interacci√≥n humano-computadora avanzada. La visi√≥n 
    por computadora analiza informaci√≥n visual para automatizaci√≥n de procesos.
    
    La ciencia de datos combina an√°lisis estad√≠stico con experiencia en el dominio. La ingenier√≠a 
    de software asegura sistemas escalables y mantenibles. La gesti√≥n de bases de datos proporciona 
    almacenamiento eficiente de informaci√≥n estructurada y no estructurada.
    
    La computaci√≥n en la nube ofrece infraestructura el√°stica para aplicaciones empresariales. 
    La ciberseguridad protege activos digitales mediante estrategias de defensa multicapa. El 
    internet de las cosas conecta dispositivos para generar datos en tiempo real.
    """
    
    large_spanish = base_spanish * 15  # About 8KB
    
    print(f"üìÑ Documento: {len(large_spanish)} caracteres ({len(large_spanish)/1024:.1f}KB)")
    
    start_time = time.time()
    result = build_concept_graph(large_spanish)
    duration = time.time() - start_time
    
    nodes = len(result.get('nodes', []))
    links = len(result.get('links', []))
    
    print(f"‚è±Ô∏è Tiempo: {duration:.2f}s")
    print(f"üìä Resultado: {nodes} nodos, {links} enlaces")
    
    if duration <= 5:
        print("‚úÖ Rendimiento excelente (‚â§5s)")
        return True
    elif duration <= 10:
        print("‚úÖ Rendimiento aceptable (‚â§10s)")
        return True
    else:
        print("‚ö†Ô∏è Rendimiento lento (>10s)")
        return False

def main():
    print("üá™üá∏ PRUEBA COMPLETA DE SOPORTE ESPA√ëOL INTEGRADO")
    print("=" * 70)
    
    # Test 1: Spanish quality
    quality_ok, time_ok, filter_ok = test_integrated_spanish()
    
    # Test 2: Mixed content
    mixed_ok = test_mixed_content()
    
    # Test 3: Performance
    perf_ok = test_performance_large_spanish()
    
    # Final assessment
    print("\n" + "=" * 70)
    print("üéØ EVALUACI√ìN FINAL DEL SOPORTE ESPA√ëOL")
    print("=" * 70)
    
    tests_passed = sum([quality_ok, time_ok, filter_ok, mixed_ok, perf_ok])
    total_tests = 5
    
    print(f"üìä Pruebas pasadas: {tests_passed}/{total_tests}")
    print(f"   {'‚úÖ' if quality_ok else '‚ùå'} Calidad de extracci√≥n")
    print(f"   {'‚úÖ' if time_ok else '‚ùå'} Rendimiento temporal")
    print(f"   {'‚úÖ' if filter_ok else '‚ùå'} Filtrado de palabras")
    print(f"   {'‚úÖ' if mixed_ok else '‚ùå'} Contenido mixto")
    print(f"   {'‚úÖ' if perf_ok else '‚ùå'} Rendimiento con documentos grandes")
    
    if tests_passed >= 4:
        print("\nüéâ ¬°√âXITO! El soporte espa√±ol est√° integrado y funcionando correctamente!")
        print("   ‚úÖ Listo para uso en producci√≥n")
    else:
        print("\n‚ö†Ô∏è El soporte espa√±ol necesita mejoras adicionales")
        print("   üîÑ Continuar optimizaci√≥n")

if __name__ == "__main__":
    main()
